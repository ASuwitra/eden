/*
    Static JS for Vulnerability module

    Demo code: https://github.com/roraback/Vulnerability-Mapping/blob/master/js/controls.js
*/

var drawerOpen = false;

var colors = {
    0: '#999999',
    1: '#ff5121',
    2: '#f4961c',
    3: '#d6b317',
    4: '#77b826',
    5: '#059346'
}
var l1 = {};
var l2 = {};
var l3 = {};
var l4 = {};
var map, parser, proj4326, resilienceLayer;
S3.i18n.gis_requires_login = 'Requires Login';

function capitalize(string) {
    var output = [];
    for (var i = 0; i < string.length; i++) {
        output.push(string[i].toUpperCase());
    }
    return output.join('');
};

// Load the Map asynchronously
yepnope({
    load: [S3.Ap.concat('/static/scripts/gis/OpenLayers.js')],
    complete: function(){
        v_show_map()
    }
})

$(document).ready(function(){
    // Provide the options for the Hierarchical Dropdown
    var res, selected;
    for (var prop in l0) {
        switch(l0[prop]['r']) {
            case 1:
                res = 'one';
                break;
            case 2:
                res = 'two';
                break;
            case 3:
                res = 'three';
                break;
            case 4:
                res = 'four';
                break;
            case 5:
                res = 'five';
                break;
            default:
                res = 'none';
                break;
        }
        if (prop == start) {
            selected = ' selected="selected"';
        } else {
            selected = '';
        }
        $('#l0_select').append('<option value="' + prop + '" class="' + res + '"' + selected + '>' + l0[prop]['n'] + '</option>');
    };
    for (var prop in l1) {
        switch(l1[prop]['r']) {
            case 1:
                res = 'one';
                break;
            case 2:
                res = 'two';
                break;
            case 3:
                res = 'three';
                break;
            case 4:
                res = 'four';
                break;
            case 5:
                res = 'five';
                break;
            default:
                res = 'none';
                break;
        }
        $('#l1_select').append('<option value="' + prop + '" class="' + res + '">' + l1[prop]['n'] + '</option>');
    };

    // Top SelectMenu
    $('#dataTopBar').hover(function(){
        $('#dataTopBar img').css('background-color', '#f7941d');
        $('#dataTopBar img').attr('src', S3.Ap.concat('/static/themes/Vulnerability/img/dropdownArrowOverPng8.png'));
        $('#dataOptions').fadeIn(150);
        $('#defaultDataLink').css('color', '#c47a21');
    },
    function(){
        $('#dataTopBar img').css('background-color', 'transparent');
        $('#dataTopBar img').attr('src', S3.Ap.concat('/static/themes/Vulnerability/img/dropdownArrowPng8.png'));
        $('#dataOptions').fadeOut(150);
        $('#defaultDataLink').css('color', '#f7941d');
    });
    $('#reportsTopBar').hover(function(){
        $('#reportsTopBar img').css('background-color', '#f7941d');
        $('#reportsTopBar img').attr('src', S3.Ap.concat('/static/themes/Vulnerability/img/dropdownArrowOverPng8.png'));
        $('#reportsOptions').fadeIn(150);
        $('#defaultReportsLink').css('color', '#c47a21');
    },
    function(){
        $('#reportsTopBar img').css('background-color', 'transparent');
        $('#reportsTopBar img').attr('src', S3.Ap.concat('/static/themes/Vulnerability/img/dropdownArrowPng8.png'));
        $('#reportsOptions').fadeOut(150);
        $('#defaultReportsLink').css('color', '#f7941d');
    });

    // Indicator Names/Descriptions
    var ratings = [];
    var li;
    for (var i in indicators) {
        li = "\
        <li>\
            <div class='indicatorRatingLabel'>\
                <div class='listText'>" + indicators[i].n + "</div>\
                <div class='popup'>\
                    <div class='popupContent'>\
                        <h3>" + indicators[i].n + "</h3>\
                        <p>" + indicators[i].d + "</p>\
                    </div>\
                    <div class='popupBottom'></div>\
                </div>\
            </div>\
            <div class='visRange'>\
                <div class='indicatorRange' id='visRange" + i + "'>\
                    <div class='leftBox'></div>\
                    <div class='medianDot'></div>\
                    <div class='rightBox'></div>\
                </div>\
            </div>\
        </li>";
        ratings.push(li);
    }
    $('#indicatorRatingChart ul').html(ratings.join(''));

    // Chart Hierarchy SelectMenu
    $('#browseOtherRegions select').selectmenu({
	    style: 'popup',
		maxHeight: 280,
		width: 160,
		menuWidth: 160,
		icons: [
			{find: '.one'},
			{find: '.two'},
			{find: '.three'},
			{find: '.four'},
			{find: '.five'}
		]
	});

    // Chart Switcher SelectMenu
    // @ToDo: Move into updateChart()
    $('#chartSwitcher').selectmenu('destroy').selectmenu({
        style: 'popup',
        maxHeight: 280,
        width: 125,
        menuWidth: 125
    });

    // Add CSS classes for font smoothing
    TypeHelpers.insertClasses();

    // Click events
    // Chrome frame
    $('.closechromeframe').click(function(){ $('.chromeframe').hide(); });
    // Drawer
    $('#show-hide').click(function(){ drawerSlide(); });
    $('#risingTab').click(function(){ drawerSlide(); });
    // Calculations info box
    $('.calculationLink').click(function(){
        $('#lightbox, #calculationView').fadeIn(300);
    });
    $('#calculationView .closePanel').click(function(){
        $('#lightbox, #calculationView').fadeOut(300);
    });

    // Hover Events
    $('.listText').hover(
        function(){
            $(this).siblings('.popup').show();
        },
        function(){
            $(this).siblings('.popup').hide();
    });
});

function v_show_map() {
    OpenLayers.ImgPath = S3.Ap.concat('/static/img/gis/openlayers/');
    parser = new OpenLayers.Format.GeoJSON();
    proj4326 = new OpenLayers.Projection('EPSG:4326');

    /* Basic Map */
    map = new OpenLayers.Map('map', {
                                    // Use Manual stylesheet download (means can be done in HEAD to not delay pageload)
                                    theme: null
                                });
    var layer = new OpenLayers.Layer.OSM('OpenStreetMap',
            ['http://otile1.mqcdn.com/tiles/1.0.0/osm/${z}/${x}/${y}.png',
             'http://otile2.mqcdn.com/tiles/1.0.0/osm/${z}/${x}/${y}.png',
             'http://otile2.mqcdn.com/tiles/1.0.0/osm/${z}/${x}/${y}.png'],
             {attribution: 'Tiles Courtesy of <a href="http://open.mapquest.co.uk/" target="_blank">MapQuest</a> <img src="http://developer.mapquest.com/content/osm/mq_logo.png" border="0">'}
            );
    map.addLayer(layer);

    // Open at the correct level
    if (start == '') {
        globalView();
    } else {
        v_select_l0(start);
    }

    /* Resilience layer */
    var style = {
        fillColor: '${fill}',
        fillOpacity: 0.5,
        strokeColor: '#ffffff',
        strokeWidth: 1,
        strokeOpacity: 1,
        graphicWidth: 14,
        graphicHeight: 14,
        graphicXOffset: -7,
        graphicYOffset: -14,
        graphicOpacity: 1,
        externalGraphic: '${externalGraphic}'
    };
    var style_options = {
        context: {
            fill: function(feature) {
                var color = colors[feature.attributes.resilience];
                return color;
            },
            externalGraphic: function(feature) {
                var resilience = feature.attributes.resilience;
                if ( resilience == null ) {
                    return '';
                } else if ( resilience == 5 ) {
                    var icon = '/static/themes/Vulnerability/img/rating5.png';
                } else if ( resilience == 4 ) {
                    var icon = '/static/themes/Vulnerability/img/rating4.png';
                } else if ( resilience == 3 ) {
                    var icon = '/static/themes/Vulnerability/img/rating3.png';
                } else if ( resilience == 2 ) {
                    var icon = '/static/themes/Vulnerability/img/rating2.png';
                } else {
                    var icon = '/static/themes/Vulnerability/img/rating1.png';
                }
                return S3.Ap.concat(icon);
            }
        }
    };
    var resilience_style = new OpenLayers.Style(
        style,
        style_options
    );
    var resilienceStyleMap = new OpenLayers.StyleMap({
        'default': resilience_style,
        'select': {
            fillOpacity: 1
        }
    });
    var features = [];
    var feature, f, geometry;
    for (var prop in l0) {
        f = l0[prop];
        geometry = parser.read(f.g, 'Geometry');
        geometry.transform(proj4326,
                           map.getProjectionObject());
        // Add a Polygon
        feature = new OpenLayers.Feature.Vector(geometry, {
                                                        id: prop,
                                                        level: 0
                                                    });
        features.push(feature);
        // Add a Point at the Centroid
        feature = new OpenLayers.Feature.Vector(geometry.getCentroid(), {
                                                        id: prop,
                                                        level: 0
                                                    });
        features.push(feature);
    }
    resilienceLayer = new OpenLayers.Layer.Vector(
        'Resilience', {
            styleMap: resilienceStyleMap
        }
    );
    resilienceLayer.addFeatures(features);
    if (start == '') {
        // pass
    } else {
        // Add L1 features
        v_l1_features(start);
    }
    map.addLayer(resilienceLayer);
    resilienceLayer.events.on({
        'featureselected': onResilienceFeatureSelect,
        'featureunselected': onFeatureUnselect
        //'loadstart': showThrobber,
        //'loadend': hideThrobber,
        //'loadcancel': hideThrobber
    });

    // @ToDo: Listen for Disable/Enable events
    //$('#resilienceCheck').change();

    /* @ToDo: Volunteers layer */

    /* @ToDo: Population Density layer */

    // Popup control
    popupControl = new OpenLayers.Control.SelectFeature(
        resilienceLayer, {
            toggle: true,
            clickout: true,
            multiple: true
        }
    );
    map.addControl(popupControl);
    popupControl.activate();
}

/* Map support functions */
function onFeatureUnselect(event) {
    var feature = event.feature;
    if (feature.popup) {
        map.removePopup(feature.popup);
        feature.popup.destroy();
        delete feature.popup;
    }
}
function onResilienceFeatureSelect(event) {
    var feature = event.feature;
    var id = feature.attributes.id;
    var level = feature.attributes.level;
    switch(level){
        case 0:
            var region = l0[id];
            var name = region.n;
            var resilience = region.r;
            if (resilience == null) {
                resilience = '';
            }
            var iclass = 'countryWindow';
            var type = 'Country';
            var typec = 'COUNTRY';
            var subtype = capitalize(region.l1);
            break;
        case 1:
            var region = l1[id];
            var name = region.n;
            var resilience = region.r;
            if (resilience == 0) {
                resilience = '';
            }
            var iclass = 'provinceWindow';
            var type = l0[region.l0].l1;
            var typec = capitalize(type);
            break;
    }
    
    var contents = "\
    <section class='infoWindow " + iclass + " activeWindow'>\
		<div class='infoWindowMain'>\
			<div id='subGeoIndicator'>" + resilience + "</div>\
			<h2 class='subGeoName'>" + name + "</h2>\
			<h2 class='subGeoType'>" + type + "</h2>\
			<a class='goToSubRegion' href='#dostuff'>GO TO THE " + typec + " <span class='arrow'>&rarr;</span></a>\
			<h3>DATA QUALITY:</h3>\
			<div class='windowQualityRatings'>\
				<div class='poor'>POOR\
					<div class='popup'>\
						<div class='popupContent'>\
							<h3>POOR</h3>\
							<p>0&ndash;25% of total data reported.</p>\
						</div>\
						<div class='popupBottom'></div>\
					</div>\
				</div> | \
				<div class='fair'>FAIR\
					<div class='popup'>\
						<div class='popupContent'>\
							<h3>FAIR</h3>\
							<p>25&ndash;50% of total data reported.</p>\
						</div>\
						<div class='popupBottom'></div>\
					</div>\
				</div> | \
				<div class='moderate'>MODERATE\
					<div class='popup'>\
						<div class='popupContent'>\
							<h3>MODERATE</h3>\
							<p>50&ndash;75% of total data reported.</p>\
						</div>\
						<div class='popupBottom'></div>\
					</div>\
				</div> | \
				<div class='strong'>STRONG\
					<div class='popup'>\
						<div class='popupContent'>\
							<h3>STRONG</h3>\
							<p>75&ndash;100% of total data reported.</p>\
						</div>\
						<div class='popupBottom'></div>\
					</div>\
				</div>\
			</div>\
			<div class='subGeoCommunesReported'> out of  Communes Reported</div>\
			<h3>POPULATION: </h3>\
			<h3>" + subtype + "S IN THIS " + typec + ":</h3>\
			<select class='subGeoSelect'></select>\
			<a class='goToSubRegion' href='#dostuff'>GO TO THE " + subtype + " <span class='arrow'>&rarr;</span></a>\
			<div class='infoWindowButtons'>\
				<div class='subGeoSubmitDataButton'>Submit Data</div>\
				<div class='subGeoAnalysisButton'>Analysis</div>\
				<div class='subGeoReportsButton'>Reports</div>\
			</div>\
		</div>\
	</section>";

    var centerPoint = feature.geometry.getBounds().getCenterLonLat();
    var popup = new OpenLayers.Popup.FramedCloud(
        id,
        centerPoint,
        new OpenLayers.Size(200, 200),
        contents,
        null,
        true,
        onPopupClose
    );
    feature.popup = popup;
    map.addPopup(popup);
    // Read extra data for location
    // Load the Popup Details asynchronously
    $.ajax({
        'url': S3.Ap.concat('/vulnerability/vdata/' + id),
        'success': function(data) {
            // Add Communes info
            var reported = region['c'];
            var total = region['t'];
            $('.subGeoCommunesReported').html(reported + ' out of ' + total + ' Communes Reported');
            // Add Population info
            var pop = region['p'];
            if (pop == null) {
            } else {
                $('.subGeoCommunesReported').next().html('POPULATION: ' + pop);
            }
            // Select Quality
            // @ToDo: Add to vdata controller
            //var quality = region['q'];
            var quality = 'p';
            switch(quality) {
                 case 'p':
                    $('.poor').addClass('currentQuality');
                    break;
                 case 'f':
                    $('.fair').addClass('currentQuality');
                    break;
                 case 'm':
                    $('.moderate').addClass('currentQuality');
                    break;
                 case 's':
                    $('.strong').addClass('currentQuality');
                    break;
            }
            for (var prop in l1) {
                switch(l1[prop]['r']) {
                    case 1:
                        res = 'one';
                        break;
                    case 2:
                        res = 'two';
                        break;
                    case 3:
                        res = 'three';
                        break;
                    case 4:
                        res = 'four';
                        break;
                    case 5:
                        res = 'five';
                        break;
                    default:
                        res = 'none';
                        break;
                }
                $('.subGeoSelect').append('<option value="' + prop + '" class="' + res + '">' + l1[prop]['n'] + '</option>');
            };
            // Add style to select
            $('.subGeoSelect').selectmenu({
                style: 'popup',
                maxHeight: 280,
                width: 160,
                menuWidth: 160,
                icons: [
                    {find: '.one'},
                    {find: '.two'},
                    {find: '.three'},
                    {find: '.four'},
                    {find: '.five'}
                ]
            });
            popup.updateSize();
            // Resize when images are loaded
            //popup.registerImageListeners();
        },
        'error': function(request, status, error) {
            if (error == 'UNAUTHORIZED') {
                msg = S3.i18n.gis_requires_login;
            } else {
                msg = request.responseText;
            }
            $('#' + id + '_contentDiv').html(msg);
            popup.updateSize();
        },
        'dataType': 'script'
    });
    // Set the CSS for the Indicator box
    if ( resilience == '' ) {
        $('#subGeoIndicator').css('background-color', colors[0]);
    } else {
        $('#subGeoIndicator').css('background-color', colors[resilience]);
    }
}
function onPopupClose(event) {
    // Close all Popups
    // Close popups associated with features
    //S3.gis.popupControl.unselectAll();
    // Close orphaned Popups (e.g. from Refresh)
    while (map.popups.length) {
        map.removePopup(map.popups[0]);
    }
}

// function to open/close the drawer
var drawerSlide = function(){
    switch(drawerOpen){
        case true:
            $('.hidden').hide('slow');
            $('#show-hide').html('<span class="arrow">&uarr;</span> SHOW MORE');
            var image = S3.Ap.concat('/static/themes/Vulnerability/img/openTabPng8.png');
            $('#risingTab').css('background-image', 'url(' + image + ')');
            $('.olPopup').fadeIn(300);
            drawerOpen = false;
            break;
        case false:
            $('#drawerInside').show('slow');
            $('#drawerInside').data('fade', setTimeout(function(){ 
                $('#resilienceSummary, #drawerQuickActions, #indicatorRatingChart, #browseOtherRegions, #dataBreakdown').fadeIn(500);
                $('.communeOnly').hide();
            }, 500));
            $('#show-hide').html('<span class="arrow">&darr;</span> SHOW LESS');
            var image = S3.Ap.concat('/static/themes/Vulnerability/img/closeTabPng8.png');
            $('#risingTab').css('background-image', 'url(' + image + ')');
            $('.olPopup').fadeOut(300);
            drawerOpen = true;
            break;
    }
};

var markersOn = function(){
    var image = S3.Ap.concat('/static/themes/Vulnerability/img/mapIconOnPng8.png');
    $('#mapSection').css('background', 'url(' + image + ') no-repeat center top transparent');
    image = S3.Ap.concat('/static/themes/Vulnerability/img/volunteerIconOnPng8.png');
    $('#volunteerSection').css('background', 'url(' + image + ') no-repeat center top transparent');
    $('.iconSection').css('color', '#565656');
}
var markersOff = function(){
    var image = S3.Ap.concat('/static/themes/Vulnerability/img/mapIconOffPng8.png');
    $('#mapSection').css('background', 'url(' + image + ') no-repeat center top transparent');
    image = S3.Ap.concat('/static/themes/Vulnerability/img/volunteerIconOffPng8.png');
    $('#volunteerSection').css('background', 'url(' + image + ') no-repeat center top transparent');
    $('.iconSection').css('color', '#ccc');
};

var globalView = function(){
    markersOff();
    $('#l0_breadcrumb, #l1_breadcrumb, #l2_breadcrumb, #l3_breadcrumb, #l4_breadcrumb, #l5_breadcrumb, #show-hide, #divider, #analysisLink, #indicator, #risingTab').hide();
    $('.hidden').hide('slow');
    $('.geoName').html('&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Select a country');
    $('.geoType').html('');
    $('.year').html('');
    $('.olPopup').fadeOut(300);
    //$('.activeWindow').fadeOut(300);
    //$('.activeWindow').removeClass('activeWindow');
    //$('.countryWindow').addClass('activeWindow');
    //$('.activeWindow').fadeIn(300);
    //refreshDropdowns('kitten');
    var bottom_left = new OpenLayers.LonLat(80, -50).transform(
            proj4326,
            map.getProjectionObject()
        )
    var top_right = new OpenLayers.LonLat(180, 50).transform(
            proj4326,
            map.getProjectionObject()
        )
    var bounds = [bottom_left.lon, bottom_left.lat, top_right.lon, top_right.lat];
    map.zoomToExtent(bounds);
};

var v_l1_features = function(id) {
    // Add the L1 features for an L0 to the map
    var features = [];
    var feature, f, geometry;
    for (var prop in l1) {
        f = l1[prop];
        if (f.f != id) {
            // Not the right parent: pass
        } else if (f.g == null) {
            // No geometry: pass
        } else {
            geometry = parser.read(f.g, 'Geometry');
            geometry.transform(proj4326,
                               map.getProjectionObject());
            // Add a Polygon
            feature = new OpenLayers.Feature.Vector(geometry, {
                                                            id: prop,
                                                            level: 1
                                                        });
            features.push(feature);
            // Add a Point at the Centroid
            feature = new OpenLayers.Feature.Vector(geometry.getCentroid(), {
                                                            id: prop,
                                                            level: 1
                                                        });
            features.push(feature);
        }
    }
    resilienceLayer.addFeatures(features);
}

var v_select_l0 = function(id) {
    // L0 has been selected
    var country = l0[id];
    var geometry = parser.read(country.g, 'Geometry');
    var bounds = geometry.getBounds();
    var bottom_left = new OpenLayers.LonLat(bounds.left, bounds.bottom).transform(
            proj4326,
            map.getProjectionObject()
        )
    var top_right = new OpenLayers.LonLat(bounds.right, bounds.top).transform(
            proj4326,
            map.getProjectionObject()
        )
    var bounds_900913 = [bottom_left.lon, bottom_left.lat, top_right.lon, top_right.lat];
    map.zoomToExtent(bounds_900913);
    var l0_name = country.n;
    var resilience = country.r;
    $('#l1_breadcrumb, #l2_breadcrumb, #l3_breadcrumb, #l4_breadcrumb, #l5_breadcrumb').hide()
    $('#l0_breadcrumb').html(' &raquo; ' + l0_name).show();
    // Set the CSS for the Indicator boxes
    if ( resilience == null ) {
        $('#indicator').css('background-color', colors[0]);
        $('#mainRating').css('background-color', colors[0]);
    } else {
        $('#indicator').html(resilience);
        $('#mainRating').html(resilience);
        $('#indicator').css('background-color', colors[resilience]);
        $('#mainRating').css('background-color', colors[resilience]);
    }
    $('#geoName').html(l0_name);
    $('.geoType').html('Country in');
    $('.year').html('2012');
    $('#l0').val(id);
    $('#l1, #l2, #l3, #l4, #l5').val('');
    markersOff();
    if (resilienceLayer != null) {
        // Add L1 features to the map
        v_l1_features(id);
    }
    // etc, etc
}

var v_select_l1 = function(id) {
    // L1 has been selected
    $('#l2_breadcrumb, #l3_breadcrumb, #l4_breadcrumb, #l5_breadcrumb').hide()
    $('#l0_breadcrumb').html(' &raquo; ' + l0_name).show();
    $('#l1_breadcrumb').html(' &raquo; ' + l1_name).show();
    $('#geoName').html(l1_name);
    $('.geoType').html('Province in'); // @ToDo: Hierarchy Names
    $('.year').html('2012');
    $('#l0').val();
    $('#l1').val(id);
    $('#l2, #l3, #l4, #l5').val('');
    markersOff();
    // etc, etc
}

var v_select_l2 = function(id) {
    // L2 has been selected
    $('#l3_breadcrumb, #l4_breadcrumb, #l5_breadcrumb').hide()
    $('#l0_breadcrumb').html(' &raquo; ' + l0_name).show();
    $('#l1_breadcrumb').html(' &raquo; ' + l1_name).show();
    $('#l2_breadcrumb').html(' &raquo; ' + l2_name).show();
    $('#geoName').html(l2_name);
    $('.geoType').html('District in'); // @ToDo: Hierarchy Names
    $('.year').html('2012');
    $('#l0').val();
    $('#l1').val();
    $('#l2').val(id);
    $('#l3, #l4, #l5').val('');
    markersOn();
    // etc, etc
}
