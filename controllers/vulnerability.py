# -*- coding: utf-8 -*-

"""
    Sahana Eden Vulnerability Controller
"""

module = request.controller
resourcename = request.function

if not settings.has_module(module):
    raise HTTP(404, body="Module disabled: %s" % module)

# -----------------------------------------------------------------------------
def index():
    """ Module Home Page: Map """

    # This module uses it's own Theme
    settings.base.theme = "Vulnerability"

    # Additional scripts
    append = s3.scripts.append
    append("/%s/static/scripts/yepnope.1.5.4-min.js" % appname)
    if s3.debug:
        append("/%s/static/scripts/jquery.ui.selectmenu.js" % appname)
        append("/%s/static/scripts/TypeHelpers.js" % appname)
        append("/%s/static/scripts/S3/s3.vulnerability.js" % appname)
    else:
        append("/%s/static/scripts/S3/s3.vulnerability.min.js" % appname)

    js_global = []
    append = js_global.append

    # Get the L0 polygons
    countries = l0()
    append('''l0=%s\n''' % json.dumps(countries))

    # Get the default location to open the map
    bounds = None
    root_org = auth.root_org()
    start = False
    if root_org:
        otable = s3db.org_organisation
        ttable = s3db.gis_location_tag
        gtable = s3db.gis_location
        query = (otable.id == root_org) & \
                (ttable.tag == "ISO2") & \
                (ttable.value == otable.country)
        r = db(query).select(ttable.location_id,
                             limitby=(0, 1)).first()
        if r and r.location_id in countries:
            start = True
            append('''start="%s"\n''' % r.location_id)
    if not start:
        append('''start=''\n''')

    # Get the list of indicators
    itable = s3db.vulnerability_indicator
    query = (itable.deleted == False)
    rows = db(query).select(itable.name,
                            itable.description,
                            itable.parameter_id,
                            orderby=itable.name)
    indicators = OrderedDict()
    for row in rows:
        indicators[row.parameter_id] = dict(n=row.name,
                                            d=row.description)
    append('''indicators=%s''' % json.dumps(indicators))

    s3.js_global.append("".join(js_global))

    response.view = "vulnerability/map.html"
    return dict()

# -----------------------------------------------------------------------------
def l0():
    """
        Return a data structure for Countries, including Polygons, Resilience
        and Hierarchy Labels
    """

    countries = ["TL", "VN"]
    gtable = s3db.gis_location
    ttable = s3db.gis_location_tag
    htable = s3db.gis_hierarchy
    query = (gtable.id == ttable.location_id) & \
            (ttable.tag == "ISO2") & \
            (ttable.value.belongs(countries)) & \
            (gtable.id == htable.location_id)
    atable = s3db.vulnerability_aggregated_indicator
    stable = s3db.stats_aggregate
    lquery = (atable.name == "Resilience") & \
             (stable.parameter_id == atable.parameter_id) & \
             (stable.agg_type == 4) & \
             (stable.location_id == gtable.id)
    left = stable.on(lquery)
    data = {}
    ids = []
    append = ids.append
    if settings.get_gis_spatialdb():
        # Do the Simplify & GeoJSON direct from the DB
        rows = db(query).select(gtable.id,
                                gtable.name,
                                gtable.the_geom.st_simplify(0.001).st_asgeojson(precision=4).with_alias("geojson"),
                                htable.L1,
                                htable.L2,
                                htable.L3,
                                htable.L4,
                                stable.date,
                                stable.mean,
                                orderby=~stable.date,
                                left=left)
        for row in rows:
            id = row[gtable].id
            if id in ids:
                # We're only interested in the most recent data per location
                continue
            append(id)
            mean = row[stable].mean
            if mean is None:
                resilience = 0
            else:
                resilience = int(round(mean, 0))
            _grow = row[gtable]
            _hrow = row[htable]
            data[id] = dict(g = _grow.geojson,
                            r = resilience,
                            n = _grow.name,
                            l1 = _hrow.L1,
                            l2 = _hrow.L2,
                            l3 = _hrow.L3,
                            l4 = _hrow.L4,
                            )
    else:
        rows = db(query).select(gtable.id,
                                gtable.name,
                                gtable.wkt,
                                htable.L1,
                                htable.L2,
                                htable.L3,
                                htable.L4,
                                stable.date,
                                stable.mean,
                                orderby=~stable.date,
                                left=left)
        simplify = gis.simplify
        for row in rows:
            id = row[gtable].id
            if id in ids:
                # We're only interested in the most recent data per location
                continue
            append(id)
            mean = row[stable].mean
            if mean is None:
                resilience = None
            else:
                resilience = int(round(mean, 0))
            _grow = row[gtable]
            geojson = simplify(_grow.wkt, output="geojson")
            _hrow = row[htable]
            data[id] = dict(g = geojson,
                            r = resilience,
                            n = _grow.name,
                            l1 = _hrow.L1,
                            l2 = _hrow.L2,
                            l3 = _hrow.L3,
                            l4 = _hrow.L4,
                            )

    return data

# -----------------------------------------------------------------------------
def vdata():
    """
        Return JSON of the Vulnerability data for a location
        - for display in Map Popups and the Drawer
    """

    try:
        id = request.args[0]
    except:
        raise HTTP(400)

    gtable = s3db.gis_location
    query = (gtable.id == id)
    row = db(query).select(gtable.level,
                           limitby=(0, 1)).first()
    if not row:
        return ""
    level = row.level
    if level == "L0":
        # We already have the Polygon & Resilience
        data = {}
    else:
        atable = s3db.vulnerability_aggregated_indicator
        stable = s3db.stats_aggregate
        lquery = (atable.name == "Resilience") & \
                 (stable.parameter_id == atable.parameter_id) & \
                 (stable.agg_type == 4) & \
                 (stable.location_id == gtable.id)
        left = stable.on(lquery)
        ids = []
        append = ids.append
        if settings.get_gis_spatialdb():
            # Do the Simplify & GeoJSON direct from the DB
            row = db(query).select(gtable.name,
                                   gtable.level,
                                   gtable.L0,
                                   gtable.the_geom.st_simplify(0.001).st_asgeojson(precision=4).with_alias("geojson"),
                                   stable.date,
                                   stable.mean,
                                   orderby=~stable.date,
                                   limitby=(0, 1),
                                   left=left).first()
            mean = row[stable].mean
            if mean is None:
                resilience = 0
            else:
                resilience = int(round(mean, 0))
            _grow = row[gtable]
            level = _grow.level
            l0 = db(gtable.name == _grow.L0).select(gtable.id,
                                                    limitby=(0, 1)).first()
            if l0:
                l0 = l0.id
            data = dict(p = _grow.geojson,
                        r = resilience,
                        n = _grow.name,
                        l0 = l0
                        )
        else:
            row = db(query).select(gtable.name,
                                   gtable.level,
                                   gtable.L0,
                                   gtable.wkt,
                                   stable.date,
                                   stable.mean,
                                   orderby=~stable.date,
                                   limitby=(0, 1),
                                   left=left).first()
            mean = row[stable].mean
            if mean is None:
                resilience = None
            else:
                resilience = int(round(mean, 0))
            _grow = row[gtable]
            geojson = gis.simplify(_grow.wkt, output="geojson")
            level = _grow.level
            l0 = db(gtable.name == _grow.L0).select(gtable.id,
                                                    limitby=(0, 1)).first()
            if l0:
                l0 = l0.id
            data = dict(p = geojson,
                        r = resilience,
                        n = _grow.name,
                        l0 = l0
                        )

    # Get the list of indicators
    indicator_pids = s3db.vulnerability_ids()
    # Get the aggregated data for this location for all indicators
    atable = s3db.stats_aggregate
    query = (atable.location_id == id) & \
            (atable.parameter_id.belongs(indicator_pids))
    rows = db(query).select(atable.parameter_id,
                            atable.min,
                            atable.max,
                            atable.median)
    indicator_data = {}
    # Get the aggregated indicator data for the location
    vtable = s3db.vulnerability_data
    if rows:
        for row in rows:
            indicator_data[row.parameter_id] = dict(
                            min = row.min,
                            max = row.max,
                            median = row.median,
                           )
    else:
        # No aggregated data so get the raw data
        query = (vtable.location_id == id) & \
                (vtable.parameter_id.belongs(indicator_pids)) & \
                (vtable.deleted != True)
        rows = db(query).select(vtable.parameter_id,
                                vtable.value)
        for row in rows:
            indicator_data[row.parameter_id] = row.value

    data["i"] = indicator_data

    # Get the Demographic data for the location
    dtable = s3db.stats_demographic_data
    stable = s3db.doc_source
    query = (dtable.location_id == id) & \
            (dtable.parameter_id.name == "Population") & \
            (dtable.source_id == stable.source_id)
    row = db(query).select(dtable.value,
                           dtable.date.max(),
                           stable.name,
                           limitby=(0, 1)).first()
    data["p"] = row[dtable].value
    data["s"] = row[stable].name

    if level == "L0":
        # Append to existing data for location
        script = '''l%(level)s[%(id)s]['i']=%(i)s
l%(level)s[%(id)s]['p']=%(p)s
l%(level)s[%(id)s]['s']=%(s)s''' % dict(level=level[1],
                                        id=id,
                                        i = json.dumps(data["i"]),
                                        p = json.dumps(data["p"]),
                                        s = json.dumps(data["s"])
                                        )
    else:
        # Add data for this location
        script = '''l%s[%s]=%s''' % (level[1], id, json.dumps(data))
    response.headers["Content-Type"] = "application/json"
    return script

# -----------------------------------------------------------------------------
def report():
    """ REST Controller """

    request = current.request
    if len(request.args) == 1:
        if request.args[0] == "filter":
            filter_request = request.post_vars
            doctable = s3db.doc_document
            query = (doctable.deleted != True)
            try:
                loc_id = int(filter_request["location_id"])
            except:
                loc_id = -1
            if loc_id != -1:
                query &= (doctable.location_id == loc_id)
            if filter_request["from_date"]:
                query &= (doctable.date >= filter_request["from_date"])
            if filter_request["to_date"]:
                query &= (doctable.date <= filter_request["to_date"])
            # @todo : Need to add a link to the type (join on source_id and then
            #         look at the instance type?)
            report_data = {}
            report_data["Approval"] = [1, 2, 3]
            report_data["VCA"] = [4, 5, 6, 7, 8]
            report_data["Reports"] = [9, 10, 11, 12, 13, 14]

            response.headers["Content-Type"] = "application/json"
            return json.dumps(report_data)

    filter = {}
    date_widget = S3DateWidget(future=0)
    to_date = Field("to_date")
    to_date._tablename = ""
    from_date = Field("from_date")
    from_date._tablename = ""
    filter["to_date"] = str(date_widget(to_date, None))
    filter["from_date"] = str(date_widget(from_date, None))
    report_data = {}
    report_data["Approval"] = [1, 2, 3]
    report_data["VCA"] = [4, 5, 6, 7, 8]
    report_data["Reports"] = [9, 10, 11, 12, 13, 14]
    data_dict = {"filter" : filter,
                 "report" : report_data,
                 }
    data = json.dumps(data_dict)

    response.headers["Content-Type"] = "application/json"
    return data

# -----------------------------------------------------------------------------
def indicator():
    """ REST Controller """

    return s3_rest_controller()

# -----------------------------------------------------------------------------
def aggregated_indicator():
    """ REST Controller """

    return s3_rest_controller()

# -----------------------------------------------------------------------------
def data():
    """ REST Controller """

    return s3_rest_controller()

# END =========================================================================
