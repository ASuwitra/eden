# -*- coding: utf-8 -*-

"""
    Sahana Eden Vulnerability Controller
"""
try:
    import json # try stdlib (Python 2.6)
except ImportError:
    try:
        import simplejson as json # try external module
    except:
        import gluon.contrib.simplejson as json # fallback to pure-Python module



module = request.controller
resourcename = request.function

if not settings.has_module(module):
    raise HTTP(404, body="Module disabled: %s" % module)

# -----------------------------------------------------------------------------
def index():
    """ Module Home Page """

    module_name = settings.modules[module].name_nice
    response.title = module_name

    return dict(module_name=module_name)

# -----------------------------------------------------------------------------
def vulnerability_map():
    """ Custom Map Page """
    args = current.request.args
    s3db = current.s3db
    vul_table = s3db.vulnerability_data
    location_data = {}
    if len(args) > 0:
        location_id = args[0]
        location_data["id"] = location_id
        agg_table = s3db.stats_aggregate
        # get the list of parameter ids that are to be used
        param_list = s3.vulnerability_ids()
        query = (agg_table.location_id == location_id) & \
                 (agg_table.parameter_id.belongs(param_list))
        rows = db(query).select()
        agg_data = {}
        # Get the aggregated data for the location
        if rows:
            for row in rows:
                summary = dict(min = row.min,
                               max = row.max,
                               mean = row.mean,
                               median = row.median,
                               )
                agg_data[row.parameter_id.name] = summary
        else:
            # No aggregate data so get the raw data
            query = ((vul_table.location_id == location_id) & \
                     (vul_table.parameter_id.belongs(param_list)) & \
                     (vul_table.deleted != True)
                     )
            rows = db(query).select()
            for row in rows:
                summary = dict(value = row.value,
                               )
                agg_data[row.parameter_id.name] = summary
        location_data["Indicators"] = agg_data
        location_data["Indicator_lists"] = s3.vulnerability_names()

        # Get the resilience data for the location
        resilience_id = s3.vulnerability_index_id()
        data_table = s3db.stats_data
        query = ((vul_table.location_id == location_id) & \
                 (vul_table.parameter_id == resilience_id) & \
                 (vul_table.deleted != True)
                 )
        row = db(query).select(vul_table.value,
                               vul_table.date.max(),
                               limitby=(0, 1)).first()
        location_data["Index"] = [(location_id, row.vulnerability_data.value)]

        # Get the demographic data
        demo_table = s3db.stats_demographic_data
        demographic = "Population"
        query = (demo_table.location_id == location_id) & \
                 (demo_table.parameter_id.name == demographic)
        row = db(query).select(demo_table.value,
                               demo_table.date.max(),
                               limitby=(0, 1)).first()
        population = row.stats_demographic_data.value
        location_data[demographic] = population
    map = gis.show_map()

    response.view = "vulnerability/map.html"
    return dict(map=map,
                data=json.dumps(location_data),
               )

# -----------------------------------------------------------------------------
def indicator():
    """ REST Controller """

    return s3_rest_controller()

# -----------------------------------------------------------------------------
def data():
    """ REST Controller """

    return s3_rest_controller()

# END =========================================================================